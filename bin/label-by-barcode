#!/usr/bin/env python

import argparse
import logging
import string

from Bio import SeqIO

REVCOMP = string.maketrans('GATCRYgatcry', 'CTAGYRctagyr')

def reverse_complement(seq, tr=REVCOMP):
    ''' reverse complement a DNA sequence '''
    return complement(seq, tr=REVCOMP)[::-1]

def complement(seq, tr=REVCOMP):
    ''' complement a DNA sequence '''
    return seq.translate(tr)


def parse_args():
    '''
    return arguments
    >>> args = parse_args()

    '''

    parser = argparse.ArgumentParser()
    parser.add_argument('--log', default='/dev/stderr',
                        help='log file (default=stderr)')
    parser.add_argument('--input', default='/dev/stdin')
    parser.add_argument('--output', default='/dev/stdout')
    parser.add_argument('--input-format', default='fasta')
    parser.add_argument('--output-format', default='fasta')
    parser.add_argument('--barcodes', help='barcode list')
    parser.add_argument('--out-dir')

    return parser.parse_args()


def load_barcodes(path, rev_comp=True):
    barcodes = {}
    with open(path) as handle:
        for line in handle:
            id_, seq = line.strip().split(',')

            if rev_comp == True:
                seq = reverse_complement(seq)

            if seq in barcodes:
                logging.error('sequence %s present multiple times in %s', seq, path)
                quit(-1)
            barcodes[seq] = id_

    if not len(set(len(i) for i in barcodes.keys())) == 1:
        logging.error('barcodes must all be equal length!')
        quit(-1)
    return barcodes

def print_stats(stats):
    logging.info('total={total}, '
                 'matched={matched}, '
                 'unmatched={unmatched},'.format(**stats))


def main():
    '''
        >>> main() # stuff happens
    '''

    args = parse_args()
    logging.basicConfig(filename=args.log, level=logging.INFO)

    logging.info(args)

    barcodes = load_barcodes(args.barcodes, rev_comp=True)

    logging.info('loaded %s barcodes', len(barcodes))

    # get barcode length, use to trim barcode read. We can do this because
    # load_barcodes asserts that they're all the same length
    bc_len = len(barcodes.keys()[0])

    logging.info('barcode length: %s', bc_len)

    stats = { 'matched': 0,
              'unmatched': 0,
              'total': 0
              }

    logging.info('reading sequences from %s', args.input)
    logging.info('writing output to %s', args.output)
    output = open(args.output, 'w')

    with open(args.input) as handle:
        records = SeqIO.parse(handle, args.input_format)
        for record in records:
            stats['total'] += 1
            barcode = record.id.split(':')[-1]

            id = barcodes.get(barcode, None)

            if id is None:
                stats['unmatched'] += 1
                continue

            stats['matched'] += 1

            record.id = '%s' % id

            output.write(record.format(args.output_format))

            if stats['total'] % 10000 == 0: print_stats(stats)

    print_stats(stats)
    logging.info('done')
    output.close()



if __name__ == '__main__':
    main()
